name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  android-e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Cache Node modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Node dependencies
      run: |
        echo "üì¶ Installing Node.js dependencies..."
        npm install
        echo "‚úÖ Dependencies installed successfully"

    - name: Run E2E tests on emulator
      uses: ReactiveCircus/android-emulator-runner@v2
      env:
        ANDROID_APP_PATH: ${{ github.workspace }}/app/build/outputs/apk/debug/app-debug.apk
      with:
        api-level: 30
        arch: x86_64
        profile: pixel_4
        disable-animations: true
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
        script: |
          echo "üèóÔ∏è Building APK..."
          ./gradlew assembleDebug --stacktrace --no-daemon
          
          echo "‚è≥ Waiting for device..."
          adb wait-for-device
          
          echo "üîÑ Waiting for boot completion..."
          counter=0
          while [ $counter -lt 150 ]; do
            boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r\n' || echo "")
            if [ "$boot_completed" = "1" ]; then
              echo "‚úÖ Device boot completed after $counter attempts"
              break
            fi
            echo "Waiting for boot... ($counter/150)"
            sleep 2
            counter=$((counter + 1))
          done
          
          echo "üîì Unlocking device..."
          adb shell input keyevent 82 || echo "Keyevent failed, continuing..."
          adb shell wm dismiss-keyguard || echo "Dismiss keyguard failed, continuing..."
          sleep 3
          
          echo "üì± Checking APK..."
          ls -la app/build/outputs/apk/debug/
          
          echo "üöÄ Installing Appium globally..."
          npm install -g appium@3.0.1
          
          echo "üîß Installing UiAutomator2 driver..."
          appium driver install uiautomator2@5.0.0
          
          echo "üìã Listing installed drivers..."
          appium driver list --installed || echo "Driver list failed, continuing..."
          
          echo "üî• Starting Appium server..."
          appium --port 4723 --base-path /wd/hub --log-level info --relaxed-security &
          APPIUM_PID=$!
          echo "Appium PID: $APPIUM_PID"
          
          echo "‚è±Ô∏è Waiting for Appium server to start..."
          counter=0
          while [ $counter -lt 30 ]; do
            if curl -s http://127.0.0.1:4723/wd/hub/status >/dev/null 2>&1; then
              echo "‚úÖ Appium server is ready after $counter attempts"
              break
            fi
            echo "Waiting for Appium server... ($counter/30)"
            sleep 2
            counter=$((counter + 1))
          done
          
          echo "üîç Checking Appium status..."
          curl -s http://127.0.0.1:4723/wd/hub/status || echo "Status check failed, but continuing..."
          
          echo "üß™ Running Appium tests..."
          npx wdio wdio.android.conf.js
          TEST_EXIT_CODE=$?
          
          echo "üõë Stopping Appium server..."
          if [ ! -z "$APPIUM_PID" ]; then
            kill $APPIUM_PID || echo "Failed to kill Appium process"
          fi
          
          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "‚úÖ Test execution completed successfully"
          else
            echo "‚ùå Test execution failed with exit code $TEST_EXIT_CODE"
            exit $TEST_EXIT_CODE
          fi

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          app/build/outputs/apk/debug/app-debug.apk
          test-results/
          logs/
          *.log
