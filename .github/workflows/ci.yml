name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: |
        chmod +x ./gradlew
        ls -la ./gradlew

    - name: Check Java version
      run: |
        java -version
        echo "JAVA_HOME: $JAVA_HOME"

    - name: Check Gradle version
      run: ./gradlew --version

    - name: Build debug APK
      run: |
        echo "Building APK..."
        ./gradlew assembleDebug --stacktrace --no-daemon --info
        echo "APK build completed"

    - name: Run unit tests
      run: |
        echo "Running unit tests..."
        ./gradlew testDebugUnitTest --no-daemon --info
        echo "Unit tests completed"

    - name: Verify APK exists
      run: |
        echo "Checking if APK was created..."
        ls -la app/build/outputs/apk/debug/
        echo "APK verification completed"

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk

  test-validation:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Download APK artifact
      uses: actions/download-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/

    - name: Validate APK structure
      run: |
        echo "📱 APK Validation..."
        ls -la app/build/outputs/apk/debug/
        
        # APK boyut kontrolü
        APK_SIZE=$(stat -c%s "app/build/outputs/apk/debug/app-debug.apk")
        echo "APK Size: $APK_SIZE bytes"
        
        if [ $APK_SIZE -lt 1000000 ]; then
          echo "❌ APK too small, might be corrupted"
          exit 1
        fi
        
        echo "✅ APK validation passed"

    - name: Install test dependencies
      run: npm install

    - name: Validate test configuration
      run: |
        echo "🔧 Validating test configuration..."
        
        # WebdriverIO config kontrolü
        if [ ! -f "wdio.android.conf.js" ]; then
          echo "❌ WebdriverIO config not found"
          exit 1
        fi
        echo "✅ WebdriverIO config found"
        
        # Package.json test script varlığını kontrol et
        if ! grep -q '"test":' package.json; then
          echo "❌ Test script not found in package.json"
          exit 1
        fi
        echo "✅ Test script found in package.json"
        
        # WebdriverIO config syntax kontrolü
        if ! node -c wdio.android.conf.js; then
          echo "❌ WebdriverIO config has syntax errors"
          exit 1
        fi
        echo "✅ WebdriverIO config syntax valid"
        
        # Test dependencies kontrolü
        REQUIRED_DEPS=("webdriverio" "appium" "@wdio/cli" "@wdio/mocha-framework")
        for dep in "${REQUIRED_DEPS[@]}"; do
          if ! grep -q "\"$dep\":" package.json; then
            echo "❌ Required dependency $dep not found"
            exit 1
          fi
        done
        echo "✅ All required dependencies found"
        
        echo "✅ Test configuration validation passed"

    - name: Mock Appium test (without emulator)
      run: |
        echo "🧪 Running mock test validation..."
        
        # Test dosyalarının varlığını kontrol et
        if [ ! -d "e2e" ]; then
          echo "❌ E2E test directory not found"
          exit 1
        fi
        
        # Test dosyalarını kontrol et
        TEST_FILES=$(find e2e -name "*.spec.js" | wc -l)
        echo "Found $TEST_FILES test files"
        
        if [ $TEST_FILES -eq 0 ]; then
          echo "❌ No test files found"
          exit 1
        fi
        
        echo "✅ Test structure validation passed"
        echo "🎉 CI/CD pipeline validation completed successfully!"
        echo ""
        echo "📋 Summary:"
        echo "  ✅ APK built successfully ($(stat -c%s "app/build/outputs/apk/debug/app-debug.apk") bytes)"
        echo "  ✅ Test configuration valid"
        echo "  ✅ Test files present ($TEST_FILES files)"
        echo "  ✅ Dependencies installed"
        echo ""
        echo "🚀 Ready for deployment!"

    - name: Upload validation results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: validation-results
        path: |
          app/build/outputs/apk/debug/app-debug.apk
          package.json
          wdio.android.conf.js
