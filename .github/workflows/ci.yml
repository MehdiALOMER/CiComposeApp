name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: |
        chmod +x ./gradlew
        ls -la ./gradlew

    - name: Check Java version
      run: |
        java -version
        echo "JAVA_HOME: $JAVA_HOME"

    - name: Check Gradle version
      run: ./gradlew --version

    - name: Build debug APK
      run: |
        echo "Building APK..."
        ./gradlew assembleDebug --stacktrace --no-daemon --info
        echo "APK build completed"

    - name: Run unit tests
      run: |
        echo "Running unit tests..."
        ./gradlew testDebugUnitTest --no-daemon --info
        echo "Unit tests completed"

    - name: Verify APK exists
      run: |
        echo "Checking if APK was created..."
        ls -la app/build/outputs/apk/debug/
        echo "APK verification completed"

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk

  test-e2e:
    needs: build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Node dependencies
      run: npm install

    - name: Download APK artifact
      uses: actions/download-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/

    - name: Run E2E tests with optimized emulator
      uses: ReactiveCircus/android-emulator-runner@v2
      env:
        ANDROID_APP_PATH: ${{ github.workspace }}/app/build/outputs/apk/debug/app-debug.apk
      with:
        api-level: 28
        target: default
        arch: x86_64
        profile: pixel_3a
        cores: 2
        ram-size: 2048M
        heap-size: 512M
        disable-animations: true
        disable-spellchecker: true
        disable-linux-hw-accel: false
        enable-hw-keyboard: true
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -camera-front none
        script: |
          echo "üì± Verifying APK..."
          ls -la app/build/outputs/apk/debug/
          
          echo "üöÄ Installing Appium..."
          npm install -g appium@3.0.1
          appium driver install uiautomator2@5.0.0
          
          echo "üî• Starting Appium server..."
          appium --port 4723 --base-path /wd/hub --relaxed-security &
          sleep 8
          
          echo "üîç Checking Appium status..."
          curl -s http://127.0.0.1:4723/wd/hub/status || echo "Appium status check failed, continuing..."
          
          echo "üß™ Running E2E tests..."
          npx wdio wdio.android.conf.js

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test-results/
          logs/
          *.log
