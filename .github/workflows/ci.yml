name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Build debug APK
      run: ./gradlew assembleDebug

    - name: Run unit tests
      run: ./gradlew testDebugUnitTest

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk

  appium-test:
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Download APK artifact
      uses: actions/download-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/

    - name: Enable KVM group perms
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: Set up Android SDK
      uses: android-actions/setup-android@v3

    - name: Accept Android SDK licenses
      run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses

    - name: Install Android System Images
      run: |
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "system-images;android-30;google_apis;x86_64"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools"
        $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "emulator"

    - name: Create AVD
      run: |
        echo "no" | $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager create avd \
          --force \
          --name test_emulator \
          --abi google_apis/x86_64 \
          --package "system-images;android-30;google_apis;x86_64" \
          --device "pixel_4"

    - name: Start Android Emulator
      run: |
        $ANDROID_HOME/emulator/emulator -avd test_emulator -no-audio -no-window -gpu swiftshader_indirect -no-snapshot -wipe-data -no-boot-anim &
        adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'

    - name: Install Appium
      run: |
        npm install -g appium
        appium driver install uiautomator2

    - name: Start Appium Server
      run: |
        appium --port 4723 --base-path /wd/hub &
        sleep 10

    - name: Run Appium Tests
      env:
        ANDROID_APP_PATH: ${{ github.workspace }}/app/build/outputs/apk/debug/app-debug.apk
      run: npx wdio wdio.android.conf.js

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          test-results/
          logs/
